[
  {
    "title": "Actions",
    "description": "Solid Notifications actions guide",
    "slug": "/actions",
    "content": "import Code, { InlineCode } from \"~/components/Code\";\r\nimport Title from \"~/components/Title\";\r\nimport HighlightBlock from \"~/components/HighlightBlock\";\r\nimport HightlightBlock from \"~/components/HighlightBlock\";\n\n<Title>Actions</Title>\n\n# Actions\n\nControl your notifications with ease using these built-in actions. {{ \"class\": \"lead\" }}\n\n## useToast() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"useToast\"}}\n\nThe `useToast` function is an entry point to managing the toasts. It returns functions for showing, updating, dismissing and removing toasts, as well as to access the queue.\n\n<Code>\n\n```tsx\nimport { useToast } from \"solid-notifications\";\r\n\r\nfunction App() {\r\n  const { notify, update, dismiss, remove, promise, getQueue, clearQueue } =\r\n    useToast();\r\n\r\n  ...\r\n}\n```\n\n</Code>\n\n### Targeting a Specific Toaster\n\nIf you have multiple toasters, you can invoke `useToast` with the toaster's id to target a specific toaster. Then, all the actions will called against that toaster.\n\n<Code>\n\n```tsx\nconst { notify } = useToast(\"toaster-1\");\n```\n\n</Code>\n\nTo target a different toaster in the same file, you can alias the methods:\n\n<Code>\n\n```tsx\nconst { notify } = useToast(\"toaster-1\");\r\nconst { notify: notify2 } = useToast(\"toaster-2\");\r\n\r\nnotify(\"Hello from toaster 1\");\r\nnotify2(\"Hello from toaster 2\");\n```\n\n</Code>\n\nAlternatively, you can store the result of `useToast()` in variables and call them separately:\n\n<Code>\n\n```tsx\nconst toaster1 = useToast(\"toaster-1\");\r\nconst toaster2 = useToast(\"toaster-2\");\r\n\r\ntoaster1.notify(\"Hello from toaster 1\");\r\ntoaster2.notify(\"Hello from toaster 2\");\n```\n\n</Code>\n\n<HightlightBlock type=\"warning\">\r\n  If you use multiple toasters and don't invoke `useToast` with a toasterId, the\r\n  toasterId will have to be provided in the action's options.\r\n</HightlightBlock>\n\n### Available Actions\n\nThe `useToast()` function returns an object containing various toast actions:\n\n```\n    - `notify` - Creates a new toast with an optional configuration.\r\n    - `update` - Updates an existing toast with new content or styling.\r\n    - `dismiss` - Dismisses a specific toast by ID or all toasts if no ID is provided.\r\n    - `remove` - Immediately removes a toast without animations.\r\n    - `promise` - Displays a loading toast that updates based on promise resolution.\r\n    - `getQueue` - Returns the current queue of toasts.\r\n    - `clearQueue` - Clears all toasts in the queue.\n```\n\n## notify() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"notify\"}}\n\nThe notify function is the primary way to trigger toasts in **SolidNotifications**. It allows you to display messages with optional configurations, such as assigning an ID, targeting a specific toaster, and customizing the toast appearance.\n\nIt takes two arguments: `content` and `options` and returns an object with the toast's ID, a reference to the toast element, and a progress control object.\n\n<InlineCode>\n\n```tsx\nnotify: (content?: ToastContent, options?: ToastOptions) => {\r\n  id: string;\r\n  ref: HTMLElement | null;\r\n  progressControls: ProgressControls;\r\n};\n```\n\n</InlineCode>\n\n### Basic usage\n\nThe simplest way to use `notify` is by calling it with a message:\n\n<Code>\n\n```tsx\nnotify(\"Hello, world!\");\n```\n\n</Code>\n\nTo target a specific toaster, you can pass the toasterId in the options object:\n\n<Code>\n\n```tsx\nnotify(\"Hello, world!\", { toasterId: \"toaster-1\" });\n```\n\n</Code>\n\n### Content\n\nThe content is the first argument of the `notify` function. It can be a string, a JSX element, or a function that returns a string or JSX element.\n\n````\n- **String** {{\"class\": \"mb-0\"}}\r\n\r\n    When passing a string `signal`, for it to be reactive, it should be passed without invoking it: {{ \"class\": \"mt-0\" }}\r\n\r\n    <Code>\r\n\r\n    ```tsx\r\n    const [text, setText] = createSignal(\"Hello, world!\");\r\n\r\n    notify(text);\r\n    ```\r\n\r\n    </Code>\r\n\r\n- **JSX Element** {{\"class\": \"mb-0\"}}\r\n\r\n    You can pass a JSX element directly to `notify`, allowing you to display fully custom-styled toasts using SolidJS components. {{\"class\": \"mt-0\"}}\r\n\r\n    <Code>\r\n\r\n    ```tsx\r\n    notify(<div>Hello, world!</div>);\r\n    ```\r\n\r\n    </Code>\r\n\r\n- **Function** {{\"class\": \"mb-0\"}}\r\n\r\n    Passing a function as the content gives you access to the toast instance, allowing dynamic rendering based on its properties like id and progress. This is useful for more advanced toasts, such as loading indicators or interactive toasts. {{\"class\": \"mt-0\"}}\r\n\r\n    <Code>\r\n\r\n    ```tsx\r\n    notify((toast) => (\r\n      <div>\r\n        <h1>{toast.id}</h1>\r\n        <p>Current progress: {toast.progressManager.progress()}</p>\r\n      </div>\r\n    ));\r\n    ```\r\n\r\n    </Code>\r\n\r\n      <HighlightBlock type=\"warning\">\r\n        Passing a function as the `content` is considered a `custom` toast and the\r\n        produced toast will not have any of the default styling, dismiss button or the\r\n        progress bar. Therefore you will need to provide the same yourself.\r\n      </HighlightBlock>\r\n\r\n      <HighlightBlock type=\"info\">\r\n        All the toast configuration properties are available in the `toastConfig` property of the toast instance.\r\n      </HighlightBlock>\n````\n\n### Options\n\nThe second argument of notify is an options object that allows you to customize the behavior and appearance of the toast.\n\nThe `options` object accepts all the [toastConfig](/props#toast-config) properties and the [other config](/props#other-config) properties except `content` (which is passed as the first argument).\n\n<Code>\n\n```tsx\nnotify(\"Hello, world!\", { duration: 5000, class: \"bg-blue-500\", type: \"info\" });\n```\n\n</Code>\n\n### Return value\n\nThe `notify` function returns an object with the following properties:\n\n* `id` - The unique identifier of the toast. {{ \"class\": \"compact\" }}\n* `ref` - A reference to the toast element. {{ \"class\": \"compact\" }}\n* `progressControls` - A progress control object that allows you to manage the toast's duration and progress bar. {{ \"class\": \"compact\" }}\n\nYou can provide your own toast `id` or let the library generate one for you.\n\n````\n      <Code>\r\n\r\n  ```tsx\r\n  notify(\"Hello, world!\", { id: \"custom-id\" });\r\n\r\n  // or\r\n\r\n  const { id } = notify(\"Hello, world!\");\r\n  ```\r\n\r\n      </Code>\r\n\r\n  The `ref` is part of the object returned by the notify function and provides a reference to the toast element itself. This can be useful if you need to directly interact with the DOM element\r\n\r\n      <Code>\r\n\r\n  ```tsx\r\n  const { ref } = notify(\"Hello, world!\");\r\n\r\n  ref.style.backgroundColor = \"green\";\r\n  ```\r\n\r\n      </Code>\r\n\r\n  The `progressControls` object contains the methods `play`, `pause` and `reset`, and the `progress` signal, allowing you to control the toast's duration and hook into the current progress.\r\n\r\n      <Code>\r\n\r\n      ```tsx\r\n      const { progressControls } = notify(\r\n        <div>\r\n          <h1>Hello, world!</h1>\r\n          <p>Current progress: {progressControls.progress()}</p>\r\n\r\n          <button onClick={progressControls.play}>Play</button>\r\n          <button onClick={progressControls.pause}>Pause</button>\r\n          <button onClick={progressControls.reset}>Reset</button>\r\n        </div>,\r\n      );\r\n      ```\r\n\r\n      </Code>\n````\n\n## update() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"update\"}}\n\nThe `update` function allows you to modify an existing toast's content or appearance. It takes one argument; an object containing [toastConfig](/props#toast-config) and [other config](/props#other-config) properties.\n\n<InlineCode>\n\n```tsx\n  update: (options: ToastOptionsUpdate) =>\r\n    | {\r\n        id: string | undefined;\r\n        ref: HTMLElement | null;\r\n        progressControls: ProgressControls;\r\n      }\r\n    | undefined;\r\n};\n```\n\n</InlineCode>\n\n<HighlightBlock type=\"info\">\r\n  As opposed to being the first argument when calling the `notify` function, the\r\n  new body, i.e. `content` of the toast, should be passed as a property in the\r\n  `options` object when calling `update`.\r\n</HighlightBlock>\n\n<Code>\n\n```tsx\nconst { id } = notify(\"Hello, world!\");\r\n\r\nupdate({ id, content: \"Updated content\", duration: 10000 });\n```\n\n</Code>\n\n### How It Works\n\nThe update function is designed to handle several scenarios, depending on the arguments provided:\n\n1. Update a specific toast:\n\n   <Code>\n\n   ```tsx\n   update({ id: \"toastId\", content: \"Updated content\", duration: 10000 });\n   ```\n\n   </Code>\n\n2. Update a specific toast in a specific toaster:\n\n   <Code>\n\n   ```tsx\n   update({\r\n     id: \"toastId\",\r\n     toasterId: \"toaster-1\",\r\n     content: \"Updated content\",\r\n     duration: 10000,\r\n   });\n   ```\n\n   </Code>\n\n3. Update all toasts in a specific toaster:\n\n   <Code>\n\n   ```tsx\n   update({\r\n     toasterId: \"toaster-1\",\r\n     content: \"Updated content\",\r\n     duration: 10000,\r\n   });\n   ```\n\n   </Code>\n\n4. Update all toasts in all toasters:\n\n   <Code>\n\n   ```tsx\n   update({ content: \"Updated content\", duration: 10000 });\n   ```\n\n   </Code>\n\n   <HighlightBlock type=\"warning\">\r\n     Take note that if the `toasterId` was provided in the `useToast` function,\r\n     all update calls will be made against that toaster.\r\n   </HighlightBlock>\n\n### Options\n\nThe `update` function takes an object containing [toastConfig](/props#toast-config) and [other config](/props#other-config) properties.\n\n### Return value\n\nThe `update` function returns the same object as the [notify function](/actions#notify), with the same properties.\n\n## dismiss() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"dismiss\"}}\n\nThe `dismiss` function allows you to remove a specific toast by ID or all toasts if no ID is provided. The exit animation and exit callback will be triggered.\n\n<InlineCode>\n\n```tsx\n  dismiss: (options?: {\r\n    id?: string;\r\n    toasterId?: string;\r\n    reason?: string;\r\n    keepQueued?: boolean;\r\n  }) => void;\n```\n\n</InlineCode>\n\n### Options\n\nThe dismiss function accepts an optional options object with the following properties:\n\n```\n- **id**: The unique identifier of the toast to dismiss. If provided, only the specified toast will be dismissed.\r\n- **toasterId**: The identifier of the toaster where the toast resides. If provided, the function will dismiss toasts only in the specified toaster.\r\n- **keepQueued**: A boolean flag that determines whether queued toasts should be preserved. If true, only rendered toasts will be dismissed.\r\n- **reason**: A string or custom value that can be used to track why a toast was dismissed (e.g., \"user_action\"). This value will be passed to the toast's `exitCallback` callback.\n```\n\nIf no arguments are provided, the function will dismiss all toasts across all toasters.\n\n### How it Works\n\nHere’s an example of how you might use the dismiss function in practice:\n\n1. Dismiss all toasts across all toasters:\n\n   <Code>\n\n   ```tsx\n   dismiss();\n   ```\n\n   </Code>\n\n2. Dismiss all rendered toasts across all toasters, keeping queued toasts:\n\n   <Code>\n\n   ```tsx\n   dismiss({ keepQueued: true });\n   ```\n\n   </Code>\n\n3. Dismiss a specific toast in a specific toaster:\n\n   <Code>\n\n   ```tsx\n   dismiss({ id: \"toastId\", toasterId: \"toaster-1\" });\n   ```\n\n   </Code>\n\n4. Dismiss all toasts in a specific toaster:\n\n   <Code>\n\n   ```tsx\n   dismiss({ toasterId: \"toaster-1\" });\n   ```\n\n   </Code>\n\n5. Dismiss all rendered toasts in a specific toaster, keeping queued toasts:\n\n   <Code>\n\n   ```tsx\n   dismiss({ toasterId: \"toaster-1\", keepQueued: true });\n   ```\n\n   </Code>\n\n   <HighlightBlock type=\"warning\">\r\n     Take note that if the `toasterId` was provided in the `useToast` function,\r\n     all dismiss calls will be made against that toaster.\r\n   </HighlightBlock>\n\n### Providing a reason for dismissal\n\nYou can provide a reason for dismissing a toast by passing a `reason` property in the options object. This can be useful for tracking why a toast was dismissed, such as when a user manually closes a toast.\n\n<Code>\n\n```tsx\ndismiss({ id: \"toastId\", reason: \"user_action\" });\n```\n\n</Code>\n\nAnd then in the toast's `exitCallback` callback:\n\n<Code>\n\n```tsx\nnotify(\"Hello, world!\", {\r\n  exitCallback: (reason) => {\r\n    console.log(`Toast dismissed due to: ${reason}`);\r\n  },\r\n});\n```\n\n</Code>\n\nIf no reason was provided, the `reason` argument will be generated by the library. If the toast was dismissed by the user, the reason will be `true`, otherwise it will be `false`.\n\n<Code>\n\n```tsx\nnotify(\"Hello, world!\", {\r\n  exitCallback: (dismissedByUser) => {\r\n    console.log(`Toast dismissed by user? ${dismissedByUser}`);\r\n  },\r\n});\n```\n\n</Code>\n\n## remove() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"remove\"}}\n\nThe `remove` function allows you to immediately remove a toast without triggering the exit animation and without running the `exitCallback`.\n\n<InlineCode>\n\n```tsx\n  remove: (options?: {\r\n    id?: string;\r\n    toasterId?: string;\r\n    keepQueued?: boolean;\r\n  }) => void;\n```\n\n</InlineCode>\n\n### Options\n\nThe `remove` function accepts the same arguments as the [dismiss function](/actions#dismiss) except for the `reason` property.\n\n### How it Works\n\nThe `remove` function can be called the same way as the `dismiss` function, such as;\n\n1. Remove all toasts across all toasters:\n\n   <Code>\n\n   ```tsx\n   remove();\n   ```\n\n   </Code>\n\n2. Remove all rendered toasts across all toasters, keeping queued toasts:\n\n   <Code>\n\n   ```tsx\n   remove({ keepQueued: true });\n   ```\n\n   </Code>\n\n3. Remove a specific toast in a specific toaster:\n\n   <Code>\n\n   ```tsx\n   remove({ id: \"toastId\", toasterId: \"toaster-1\" });\n   ```\n\n   </Code>\n\n4. Remove all toasts in a specific toaster:\n\n   <Code>\n\n   ```tsx\n   remove({ toasterId: \"toaster-1\" });\n   ```\n\n   </Code>\n\n5. Remove all rendered toasts in a specific toaster, keeping queued toasts:\n\n   <Code>\n\n   ```tsx\n   remove({ toasterId: \"toaster-1\", keepQueued: true });\n   ```\n\n   </Code>\n\n   <HighlightBlock type=\"warning\">\r\n     Take note that if the `toasterId` was provided in the `useToast` function,\r\n     all remove calls will be made against that toaster.\r\n   </HighlightBlock>\n\n## promise() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"promise\"}}\n\nThe `promise` function is a utility that simplifies handling async operations by displaying different toast states for pending, success, and error outcomes.\n\n<InlineCode>\n\n```tsx\npromise: <T>(\r\n    promise: Promise<T>,\r\n    messages: ToastPromiseMessages,\r\n    options?: ToastOptions,\r\n  ) => Promise<T>;\r\n\r\ninterface ToastPromiseMessages {\r\n    pending: string | JSX.Element;\r\n    success: string | JSX.Element | ((data: any) => string | JSX.Element);\r\n    error: string | JSX.Element | ((error: any) => string | JSX.Element);\r\n  }\n```\n\n</InlineCode>\n\n### How it Works\n\nThe `promise` function takes three arguments: - A **promise**. - An object containing **messages** for the pending, success, and error states. - An optional **options** object that allows you to customize the toast appearance and behavior.\n\n<Code>\n\n```tsx\nconst fetchData = () =>\r\n  new Promise<string>((resolve, reject) => {\r\n    setTimeout(() => {\r\n      Math.random() > 0.5\r\n        ? resolve(\"Data loaded successfully!\")\r\n        : reject(\"Failed to fetch data.\");\r\n    }, 2000);\r\n  });\r\n\r\ntry {\r\n  const data = await promise(\r\n    fetchData(),\r\n    {\r\n      pending: \"Fetching data...\",\r\n      success: (data) => `✅ Success: ${data}`,\r\n      error: (error) => `❌ Error: ${error}`,\r\n    },\r\n    { duration: 5000 },\r\n  );\r\n\r\n  console.log(\"Resolved data:\", data);\r\n} catch (error) {\r\n  console.error(\"Caught error:\", error);\r\n}\n```\n\n</Code>\n\n### Messages\n\nThe **messages** object contains three properties:\n\n* `pending` - The message to display while the promise is pending.\n* `success` - The message to display when the promise resolves successfully. This can be a string, JSX element, or a function that returns a string or JSX element. The function receives the resolved **data** as an argument.\n* `error` - The message to display when the promise is rejected. This can be a string, JSX element, or a function that returns a string or JSX element. The function receives the **error** as an argument.\n\n### Return value\n\nThe `promise` function returns a promise that resolves to the data returned by the original promise. This allows you to chain additional actions after the toast is dismissed.\n\n## getQueue() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"getQueue\"}}\n\nThe `getQueue` function returns an array of all toasts currently in the queue.\n\n<InlineCode>\n\n```tsx\ngetQueue: (toasterId?: string) => Toast[];\n```\n\n</InlineCode>\n\n### How it Works\n\nThe `getQueue` function can be called with an optional `toasterId` argument to target a specific toaster. If no `toasterId` is provided, the function will return all queued toasts across all toasters.\n\n<Code>\n\n```tsx\nconst queue = getQueue();\r\n// or\r\nconst queue = getQueue(\"toaster-1\");\n```\n\n</Code>\n\nTo show a number of toasts currently in the queue, you can use the `length` property of the returned array:\n\n<Code>\n\n```tsx\nconst { getQueue } = useToast();\r\n\r\nreturn <div>There are currently {getQueue().length} toasts in the queue </div>;\n```\n\n</Code>\n\n## clearQueue() {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"clearQueue\"}}\n\nThe `clearQueue` function removes currently queued toasts.\n\n<InlineCode>\n\n```tsx\nclearQueue: (toasterId?: string) => void;\n```\n\n</InlineCode>\n\n### How it Works\n\nThe `clearQueue` function can be called with an optional `toasterId` argument to target a specific toaster. If no `toasterId` is provided, the function will clear the queue for all toasters.\n\n<Code>\n\n```tsx\nclearQueue();\r\n// or\r\nclearQueue(\"toaster-1\");\n```\n\n</Code>\n"
  },
  {
    "title": "Components",
    "description": "Solid Notifications components guide",
    "slug": "/components",
    "content": "import Code, { InlineCode } from \"~/components/Code\";\r\nimport Title from \"~/components/Title\";\r\nimport HighlightBlock from \"~/components/HighlightBlock\";\n\n<Title>Components</Title>\n\n# Components\n\nSolid Notifications provides several key components to manage and display notifications. {{ \"class\": \"lead\" }}\n\n## ToastProvider {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"toastprovider\"}}\n\n### `<ToastProvider />`\n\nThe ToastProvider is a context provider component that manages the state and functionality of toasters within your application. It serves as the central hub for registering, retrieving, and unregistering toasters, as well as providing configuration options for toast notifications.\n\nWrap your application (or a specific part of it) with the ToastProvider to enable toast functionality. This component should be placed at a high level in your component tree to ensure that all child components have access to the toast context.\n\n<Code lang=\"tsx\">\n\n```tsx\nimport { ToastProvider } from \"solid-notifications\";\r\n\r\nexport default function App(props) {\r\n  return <ToastProvider>{props.children}</ToastProvider>;\r\n}\n```\n\n</Code>\n\n### Props\n\nThe ToastProvider accepts [toaster config](/props#toaster-config) props, [toast config](/props#toast-config) props and `children`.\n\n* #### Global Props and Propagation\n\n  ```\n   Props set on the `ToastProvider` are global and apply to all toasters and toasts within its context. These global settings propagate down to individual toasters and toasts, ensuring consistent behavior and styling across your application.\n  ```\n\n* #### Reactive Props\n\n  ```\n   The `ToastProvider` also accepts reactive props. This means you can pass SolidJS signals or derived values as props, and they will dynamically update the global configuration. For example, if you want to change the toast position or theme dynamically based on user preferences, you can pass a signal as the position prop.\n  ```\n\n<HighlightBlock type=\"info\">\r\n  **Local Overrides**: Individual Toasters or Toasts can override global\r\n  settings. For example, if a specific toast needs a longer duration, you can\r\n  set a duration directly on that toast, and it will take precedence over the\r\n  global setting.\r\n</HighlightBlock>\n\n## Toaster {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"toaster\"}}\n\n### `<Toaster />`\n\nThe Toaster component is responsible for rendering and managing a collection of toasts. It acts as a container for toasts, handling their lifecycle, positioning, and behavior based on global and local configuration settings. Each `Toaster` instance is registered with the `ToastProvider` and can be uniquely identified by its `toasterId`.\n\n<Code lang=\"tsx\">\n\n```tsx\nimport { Toaster } from \"solid-notifications\";\r\n\r\nexport default function App(props) {\r\n  return (\r\n    <>\r\n      <Toaster toasterId=\"primary\" />\r\n      <Toaster toasterId=\"secondary\" />\r\n      {props.children}\r\n    </>\r\n  );\r\n}\n```\n\n</Code>\n\n* **Multiple Toaster Support**: Allows you to create multiple toasters, each with its own configuration settings. {{ \"class\": \"compact\" }}\n\n* **Toast Management**: Manages a queue of toasts and renders them based on configuration settings like limit and reverseToastOrder. {{ \"class\": \"compact\" }}\n\n* **Dynamic Positioning**: Automatically calculates and updates toast positions based on their height, gutter spacing, and offset. {{ \"class\": \"compact\" }}\n\n* **Window Visibility Handling**: Pauses toast progress when the window is inactive (blurred) and resumes when the window is active (focused), depending on configuration. {{ \"class\": \"compact\" }}\n\n* **Reactive Configuration**: Supports reactive updates to its configuration, which propagate to all toasts within the toaster. {{ \"class\": \"compact\" }}\n\n### Props\n\nThe Toaster component accepts [toaster config](/props#toaster-config), [toast config](/props#toast-config) props and `toasterId`.\n\n<HighlightBlock type=\"warning\">\r\n  **Multiple Toasters**: If you use multiple toasters, each toaster must be\r\n  provided with a unique `toasterId` and toast functions must be called with a\r\n  `toasterId` prop to target the correct toaster (exceptions apply to specific\r\n  functions).\r\n</HighlightBlock>\n\n## Toast {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"toast\"}}\n\n### `class Toast`\n\nThe Toast class represents an individual notification message. They are invoked by the provided functions and rendered within a Toaster instance. Each toast can be customized with various options like content, duration, and appearance.\n\n<Code lang=\"tsx\">\n\n```tsx\nimport { useToast } from \"solid-notifications\";\r\n\r\nexport default function App() {\r\n  const { notify } = useToast();\r\n\r\n  return (\r\n    <button\r\n      onClick={() =>\r\n        notify(\"Hello, World!\", {\r\n          duration: 5000,\r\n          type: \"success\",\r\n          exitCallback: (reason) =>\r\n            console.log(`Toast exited because: ${reason}`),\r\n        })\r\n      }\r\n    >\r\n      Show Toast\r\n    </button>\r\n  );\r\n}\n```\n\n</Code>\n\n* **Customizable Content**: Supports custom content, including text, HTML, or JSX elements. {{ \"class\": \"compact\" }}\n* **Appearance Options**: Supports various appearance options like type, icon, and theme. {{ \"class\": \"compact\" }}\n* **Lifecycle Callbacks**: Provides callbacks for toast lifecycle events like onEnter, onExit, and exitCallback. {{ \"class\": \"compact\" }}\n* **Reactive Configuration**: Supports reactive updates to its configuration. {{ \"class\": \"compact\" }}\n* **Global and Local Overrides**: Overrides global settings provided by the ToastProvider or Toaster. {{ \"class\": \"compact\" }}\n\n### Props\n\nAccepts [toast config](/props#toast-config) props as well as `id` and `toasterId` ([other config](/props#other-config)). Also accepts `content` props when updating a toast.\r\nAny props specified when creating or updating a toast will take precedence over global settings.\n\n### Properties available on the `Toast` instance\n\nThese properties can be accesed when using a custom toast.\n\n<InlineCode>\n\n```tsx\nclass Toast {\r\n  store;\r\n  toastConfig: Config;\r\n  ref: HTMLElement | null = null;\r\n  state: \"entering\" | \"idle\" | \"exiting\" = \"entering\";\r\n  renderedAt: number | undefined;\r\n  progressManager: ReturnType<typeof createProgressManager>;\r\n  isPaused = true;\r\n  isPausedByUser = false;\r\n  offset = 0;\r\n\r\n...\r\n}\n```\n\n</InlineCode>\n\nEach toast instance has several properties that define its behavior and appearance.\n\n* **store**: A reference to the Toaster store that manages the toast.\n* **toastConfig**: The configuration properties of the toast.\n* **ref**: A reference to the toast's DOM element.\n* **state**: Represents the lifecycle of the toast. It can be \"entering\" when the toast is animating into view, \"idle\" when fully visible, and \"exiting\" when it is dismissed.\n* **renderedAt**: A timestamp indicating when the toast was rendered. Useful as a flag to determine if the toast is visible.\n* **progressManager**: An object responsible for managing the toast's progress bar and duration.\n* **isPaused**: A flag that indicates whether the toast's timer is currently paused.\n* **isPausedByUser**: Similar to isPaused, but specifically tracks whether the user manually paused the toast, such as by hovering over it or pressing a button.\n* **offset**: Represents the vertical position of the toast relative to other active toasts.\n"
  },
  {
    "title": "Guides",
    "description": "Solid Notifications guides",
    "slug": "/guides",
    "content": "import Code, { InlineCode } from \"~/components/Code\";\r\nimport Title from \"~/components/Title\";\r\nimport HighlightBlock from \"~/components/HighlightBlock\";\r\nimport HightlightBlock from \"~/components/HighlightBlock\";\n\n<Title>Guides</Title>\n\n# Guides\n\nThis section contains guides on how to use Solid Notifications. {{ \"class\": \"lead\" }}\n\n## Styling {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"styling\"}}\n\nSolid Notifications provides a flexible styling system that allows customization via CSS variables, dark mode support, toast types with predefined colors, and animations.\n\n### Copying the CSS file\n\nThe easiest way to get started with Solid Notifications is to copy the CSS file which can be found in the `dist` folder and edit it to suit your needs.\n\n### Customization via CSS Variables\n\nYou can customize the appearance of notifications using CSS variables. Below are the default variables used:\n\n<InlineCode>\n\n```css\n:root {\r\n  /* General */\r\n  --sn-z-index: 9999;\r\n  --sn-color-default: #121826;\r\n  --sn-color-success: #34ab53;\r\n  --sn-color-error: #ea4335;\r\n  --sn-color-warning: #f59e0b;\r\n  --sn-color-info: #5493f7;\r\n\r\n  /* Toast Wrapper */\r\n  --sn-wrapper-max-width: 334px;\r\n  --sn-wrapper-min-width: 264px;\r\n  --sn-wrapper-transition-duration: 0.3s;\r\n\r\n  /* Toast */\r\n  --sn-toast-bg-color: white;\r\n  --sn-toast-gap: 16px;\r\n  --sn-toast-font-size: 0.875rem;\r\n  --sn-toast-line-height: 1.5;\r\n  --sn-toast-padding: 15px 16px 16px 16px;\r\n  --sn-toast-text-color: #334155;\r\n  --sn-toast-border-radius: 6px;\r\n  --sn-toast-box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px,\r\n    rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n\r\n  /* Dismiss Button */\r\n  --sn-dismiss-btn-size: 1.175rem;\r\n  --sn-dismiss-btn-border-radius: 0.25rem;\r\n  --sn-dismiss-btn-transition: color 0.3s;\r\n  --sn-dismiss-btn-margin: 1px -4px 0px auto;\r\n  --sn-dismiss-btn-color: #9ca3af;\r\n  --sn-dismiss-btn-hover-color: #374151;\r\n\r\n  /* Progress Bar */\r\n  --sn-progress-bar-height: 2px;\r\n  --sn-progress-bar-color: #748aa8;\r\n\r\n  /* Icon */\r\n  --sn-icon-size: 1.125rem;\r\n  --sn-icon-margin: 1px 0 0 0;\r\n  --sn-icon-stroke: #fff;\r\n  --sn-icon-fill: #121826;\r\n}\r\n\r\n/* Dark Theme */\r\n.sn-theme-dark {\r\n  --sn-toast-bg-color: #1f2937;\r\n  --sn-toast-text-color: #f9fafb;\r\n  --sn-toast-box-shadow: inset 0 0 0.5px 1px hsla(0, 0%, 100%, 0.075),\r\n    0 0 0 1px hsla(0, 0%, 0%, 0.05), 0 0.3px 0.4px hsla(0, 0%, 0%, 0.02),\r\n    0 0.9px 1.5px hsla(0, 0%, 0%, 0.045), 0 3.5px 6px hsla(0, 0%, 0%, 0.09);\r\n  --sn-dismiss-btn-color: #bfc5cf;\r\n  --sn-dismiss-btn-hover-color: #f9fafb;\r\n  --sn-progress-bar-color: #9ca3af;\r\n  --sn-icon-stroke: #fff;\r\n}\r\n\r\n/* Toast Types */\r\n.sn-type-success {\r\n  --sn-progress-bar-color: var(--sn-color-success);\r\n  --sn-icon-fill: var(--sn-color-success);\r\n}\r\n\r\n.sn-type-error {\r\n  --sn-progress-bar-color: var(--sn-color-error);\r\n  --sn-icon-fill: var(--sn-color-error);\r\n}\r\n\r\n.sn-type-warning {\r\n  --sn-progress-bar-color: var(--sn-color-warning);\r\n  --sn-icon-fill: var(--sn-color-warning);\r\n}\r\n\r\n.sn-type-info {\r\n  --sn-progress-bar-color: var(--sn-color-info);\r\n  --sn-icon-fill: var(--sn-color-info);\r\n}\n```\n\n</InlineCode>\n\nYou can override these values in your global CSS file or within a specific component.\n\n### Themes and Types\n\nThe toast tree consists of only three elements. A toaster, a toast wrapper, and a toast.\n\n<Code>\n\n```html\n<div class=\"sn-toaster\">\r\n  <div class=\"sn-toast-wrapper\">\r\n    <div class=\"sn-toast\">This is a notification</div>\r\n  </div>\r\n</div>\n```\n\n</Code>\n\nThe way theming and types work in Solid Notifications is that the wrapper element will be provided with classes based on the provided settings. For example, if you set the `theme` to `\"dark\"`, the wrapper will have the class `\"sn-theme-dark\"`, and if you set the toast `type` to `\"success\"`, the wrapper will have the class `sn-type-success`.\n\nFor example:\n\n<Code>\n\n```tsx\nnotify(\"This is a success notification\", {\r\n  theme: \"dark\",\r\n  type: \"success\",\r\n});\n```\n\n</Code>\n\nwill result in the following HTML:\n\n<Code>\n\n```html\n<div class=\"sn-toaster\">\r\n  <div class=\"sn-toast-wrapper sn-theme-dark sn-type-success\">\r\n    <div class=\"sn-toast\">This is a success notification</div>\r\n  </div>\r\n</div>\n```\n\n</Code>\n\nYou can use this to target these classes in your CSS to style the notifications.\n\n<InlineCode>\n\n```css\n/* override the css variables */\r\n.sn-theme-dark {\r\n  --sn-color-default: #fff;\r\n  --sn-toast-bg-color: #121826;\r\n  --sn-toast-text-color: #fff;\r\n  --sn-dismiss-btn-color: #9ca3af;\r\n  --sn-dismiss-btn-hover-color: #fff;\r\n  --sn-progress-bar-color: #748aa8;\r\n  --sn-icon-fill: #fff;\r\n}\r\n\r\n.sn-type-success {\r\n  --sn-color-success: #34ab53;\r\n}\r\n\r\n/* or */\r\n\r\n/* provide the styles directly */\r\n.sn-toast-wrapper.sn-theme-dark {\r\n  background-color: #121826;\r\n}\r\n\r\n.sn-theme-dark {\r\n  color: #fff;\r\n}\n```\n\n</InlineCode>\n\nYou can provide any string as the `theme`, and it will be injected into the toast wrapper as a class. The types however are limited to `\"default\"`, `\"loading\"`, `\"success\"`, `\"error\"`, `\"warning\"`, and `\"info\"`.\n\n<Code>\n\n```tsx\nnotify(\"This is a default notification\", {\r\n  type: \"default\",\r\n  theme: \"my-custom-theme\",\r\n});\n```\n\n</Code>\n\nwill result in the following HTML:\n\n<Code>\n\n```html\n<div class=\"sn-toaster\">\r\n  <div class=\"sn-toast-wrapper sn-theme-my-custom-theme sn-type-default\">\r\n    <div class=\"sn-toast\">This is a default notification</div>\r\n  </div>\r\n</div>\n```\n\n</Code>\n\n### Animations\n\nThe wrapper will also be provided with classes based on the state of the notification. The states are `\"entering\"`, `\"idle\"`, and `\"exiting\"`, and are combined with the `positionY` and `positionX` props.\n\n<Code>\n\n```html\n<div class=\"sn-toaster\">\r\n  <div\r\n    class=\"sn-toast-wrapper sn-theme-dark sn-type-info sn-state-right-top-entering\"\r\n  >\r\n    <div class=\"sn-toast\">This is a notification</div>\r\n  </div>\r\n</div>\n```\n\n</Code>\n\nYou can use these classes to animate the notifications.\n\n<InlineCode>\n\n```css\n.sn-state-right-top-entering,\r\n.sn-state-right-bottom-entering {\r\n  -webkit-animation: SNSlideInRight 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;\r\n  animation: SNSlideInRight 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;\r\n}\r\n\r\n.sn-state-right-top-exiting,\r\n.sn-state-right-bottom-exiting {\r\n  -webkit-animation: SNSlideOutRight 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;\r\n  animation: SNSlideOutRight 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;\r\n}\n```\n\n</InlineCode>\n\nAlternatively, you can provide your own classes that you want to use with the `onEnter`, `onIdle`, and `onExit` props.\n\n<Code>\n\n```tsx\n<ToastProvider\r\n  onEnter=\"my-enter-class\"\r\n  onIdle=\"my-idle-class\"\r\n  onExit=\"my-exit-class\"\r\n>\r\n  <App />\r\n</ToastProvider>\n```\n\n</Code>\n\n### Classes as props\n\nYou can also provide your own classes or styles as props to the `ToastProvider`, `Toaster`, and when calling the `notify` or `update` function.\n\n<Code>\n\n```tsx\n<ToastProvider\r\n  wrapperClass=\"my-toast-wrapper\"\r\n  wrapperStyle={{ backgroundColor: \"red\" }}\r\n  class=\"my-toast\"\r\n  style={{ color: \"white\" }}\r\n  // etc\r\n>\r\n  <App />\r\n</ToastProvider>\n```\n\n</Code>\n\nThe dismiss button and progress bar can also be styled using the `dismissButtonClass`, `dismissButtonStyle`, `progressBarClass`, and `progressBarStyle` props.\n\nClass and style props can also be provided as a function. The function will receive the `theme` and the `type` as arguments.\n\n<Code>\n\n```tsx\nnotify(\"This is a notification\", {\r\n  progressBarStyle: ({ type }) => {\r\n    switch (type) {\r\n      case \"success\":\r\n        return { \"background-color\": \"green\" };\r\n      case \"error\":\r\n        return { \"background-color\": \"red\" };\r\n      case \"warning\":\r\n        return { \"background-color\": \"orange\" };\r\n      case \"info\":\r\n        return { \"background-color\": \"blue\" };\r\n      case \"loading\":\r\n        return { \"background-color\": \"black\" };\r\n      default:\r\n        return { \"background-color\": \"gray\" };\r\n    }\r\n  },\r\n});\n```\n\n</Code>\n\n## Custom toast {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"custom-toast\"}}\n\nYou can create custom toasts by providing a function as the first argument to the `notify` function (or as the `content` prop of the `update` function). The function will receive the `toast` class instance as an argument.\n\n<InlineCode>\n\n```tsx\nclass Toast {\r\n  store;\r\n  toastConfig: Config;\r\n  ref: HTMLElement | null = null;\r\n  state: \"entering\" | \"idle\" | \"exiting\" = \"entering\";\r\n  renderedAt: number | undefined;\r\n  progressManager: ReturnType<typeof createProgressManager>;\r\n  isPaused = true;\r\n  isPausedByUser = false;\r\n  offset = 0;\r\n\r\n...\r\n}\n```\n\n</InlineCode>\n\nThe function should return a JSX element that represents the custom toast.\n\n<Code>\n\n```tsx\nnotify(\r\n  (toast) => {\r\n    return (\r\n      <div className=\"sn-toast\">\r\n        <div className=\"sn-icon\">🚀</div>\r\n        <div className=\"sn-content\">\r\n          <div className=\"sn-title\">Custom Toast</div>\r\n          <div className=\"sn-message\">This is a custom toast</div>\r\n        </div>\r\n        <button className=\"sn-dismiss-btn\" onClick={() => toast.dismiss()}>\r\n          Dismiss\r\n        </button>\r\n      </div>\r\n    );\r\n  },\r\n  {\r\n    duration: 5000,\r\n    type: \"success\",\r\n  },\r\n);\n```\n\n</Code>\n\n<HighlightBlock type=\"warning\">\r\n  Custom toast will not receive any of the default styling and the dismiss\r\n  button and progress bar will not be added automatically. You can add them\r\n  manually if you want.\r\n</HighlightBlock>\n\n## Custom progress bar {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"custom-progress-bar\"}}\n\nYou can create custom progress bars by hooking into the progress signal returned by the `notify` or `update` function. The `showProgressBar` option should be set to `false` to prevent the default progress bar from being shown.\n\n<Code>\n\n```tsx\nconst { notify } = useToast();\r\n\r\nconst { progressControls } = notify(\r\n  <div>\r\n    <div>This is a toast with a custom progress bar</div>\r\n    <div\r\n      class=\"absolute left-0 top-0 h-full bg-blue-600/10\"\r\n      style={{ width: `${100 - progressControls.progress()}%` }}\r\n    />\r\n  </div>,\r\n  {\r\n    showProgressBar: false,\r\n  },\r\n);\n```\n\n</Code>\n\nIf using a custom toast, the progress signal can be accessed via the `progressManager` property of the `toast` instance.\n\n<Code>\n\n```tsx\nnotify(\r\n  (toast) => {\r\n    return (\r\n      <div className=\"sn-toast\">\r\n        <div>This is a custom toast with a custom progress bar</div>\r\n        <div\r\n          class=\"absolute left-0 top-0 h-full bg-blue-600/10\"\r\n          style={{ width: `${100 - toast.progressManager.progress()}%` }}\r\n        />\r\n      </div>\r\n    );\r\n  },\r\n  {\r\n    duration: 5000,\r\n    type: \"success\",\r\n  },\r\n);\n```\n\n</Code>\n\n## Show queue {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"show-queue\"}}\n\nAn example of how to show a queue of notifications can be found in the [getQueue guide](/actions/#how-it-works-4).\n\n## Track Notification Dismissal Reasons {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"show-a-reason-why-a-notification-was-dismissed\"}}\n\nAn example of how to show a reason why a notification was dismissed can be found in the [dismiss guide](/actions/#providing-a-reason-for-dismissal).\n\n## Promise API {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"promise-api\"}}\n\nAn example of how to use the promise API can be found in the [promise guide](/actions/#how-it-works-3).\n\n## Pause timer when the window loses focus {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"pause-toast-timer-when-the-window-loses-focus\"}}\n\nThe toast timer will pause by default when the window loses focus. You can disable this behavior by setting the [pauseOnWindowInactive](/props#pauseOnWindowInactive) option to `false`.\n\n## Don't render toasts when the window is not focused {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"dont-render-toasts-when-the-window-is-not-focused\"}}\n\nToasts will not be rendered when the window is not focused by default. You can disable this behavior by setting the [renderOnWindowFocus](/props#renderOnWindowInactive) option to `true`.\n\n## Drag to dismiss {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"drag-to-dismiss\"}}\n\nToast will be dismissed when dragged to the left or right of the screen by default. You can disable this behavior by setting the [dragToDismiss](/props#dragToDismiss) option to `false`.\r\nDrag treshold can be adjusted by setting the [dragTreshold](/props#dragTreshold) option.\n\n## Custom dismiss button {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"custom-dismiss-button\"}}\n\nYou can create a custom dismiss buttons by using the `id` provided by the `notify` function. You should also disable the default dismiss button by setting the `showDismissButton` option to `false`.\n\n<Code>\n\n```tsx\nconst { notify, dismiss } = useToast();\r\n\r\nconst id = notify(\r\n  <div>\r\n    <p>This is a notification</p>\r\n    <button onClick={() => notify.dismiss(id)}>Dismiss</button>\r\n  </div>,\r\n  {\r\n    duration: 5000,\r\n    showDismissButton: false,\r\n  },\r\n);\n```\n\n</Code>\n\nIf using a custom toast, you can dismiss the toast by calling the `dismiss` method on the `toast` instance.\n\n<Code>\n\n```tsx\nnotify(\r\n  (toast) => {\r\n    return (\r\n      <div className=\"sn-toast\">\r\n        <div>This is a custom toast</div>\r\n        <button\r\n          className=\"sn-dismiss-button\"\r\n          onClick={() => toast.dismiss(\"user dismissed\")}\r\n        >\r\n          Dismiss\r\n        </button>\r\n      </div>\r\n    );\r\n  },\r\n  {\r\n    duration: 5000,\r\n    type: \"success\",\r\n  },\r\n);\n```\n\n</Code>\n\n## Play or pause the notification timer manually {{\"data-nav\": \"link\", \"class\": \"text-blue-500\", \"id\": \"play-or-pause-the-notification-timer-manually\"}}\n\nThe guide on how to play or pause the notification timer manually can be found in the [play/pause guide](/actions/#return-value).\n\nIf using a custom toast, you can pause the timer by calling the `pause` method on the `progressManager` of the `toast` instance.\n\n<Code>\n\n```tsx\nnotify(\r\n  (toast) => {\r\n    return (\r\n      <div className=\"sn-toast\">\r\n        <div>This is a custom toast</div>\r\n        <button onClick={() => toast.progressManager.pause()}>Pause</button>\r\n      </div>\r\n    );\r\n  },\r\n  {\r\n    duration: 5000,\r\n    type: \"success\",\r\n  },\r\n);\n```\n\n</Code>\n"
  },
  {
    "title": "Solid Notifications",
    "description": "A simple notification system for SolidJS",
    "slug": "/",
    "content": "import Code from \"~/components/Code\";\r\nimport Title from \"~/components/Title\";\r\nimport { Toasters, CoreFeatures } from \"~/panels/intro\";\r\nimport { useToast } from \"solid-notifications\";\n\n<Title>Solid Notifications</Title>\n\n# A SolidJS Toast Library\n\nReactive, customizable toast notifications for SolidJS. {{ \"class\": \"lead\" }}\n\n<Toasters />\r\n<CoreFeatures feature=\"intro-button\" />\n\nIt’s simple to use, highly customizable, and fits projects of any size.\n\n<Code lang=\"tsx\">\n\n```tsx\nimport { useToast } from \"solid-notifications\";\r\n\r\nexport default function App() {\r\n  const { notify } = useToast();\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => notify(\"🚀 New toast ready to serve!\")}>\r\n        Create a Toast!\r\n      </button>\r\n    </div>\r\n  );\r\n}\n```\n\n</Code>\n\n## Core Features: {{\"data-nav\": \"link\"}}\n\n### 1. Queue Management: {{\"class\": \"mt-0\"}}\n\n* Toasts can be queued if there isn’t enough space or if a toast limit is reached.\n* Signal to read the length of the queue and manage it accordingly.\n* Clear queue or clear rendered toasts with a single function call.\n\n<CoreFeatures feature=\"queue-showcase\" />\n\n### 2. Reactivity: {{\"class\": \"mt-0\"}}\n\n* Progress tracking by hooking into the progress signal, usable in the UI for custom progress bars.\n* Changes to signals in ToastProvider, Toasters, and Toasts reflect in the UI dynamically.\n* Toasts can be updated dynamically with new content or configurations, with all toasts reacting to updated heights.\n\n<CoreFeatures feature=\"progress-showcase\" />\n\n### 3. Multiple Toaster Support: {{\"class\": \"mt-0\"}}\n\n* Supports multiple toasters simultaneously, each with its own state and configuration.\n\n<CoreFeatures feature=\"multiple-toasters-showcase\" />\n\n### 4. Customizability: {{\"class\": \"mt-0\"}}\n\n* Reverse toast order support.\n* Separate configurations for ToastProvder, Toaster and Toast.\n* Theme support and styling options. Custom entrance, idle and exit animations.\n* Different toast types (default, info, success, warning, error and loading).\n* Support for promise based toasts.\n* Full control using custom toasts.\n\n<CoreFeatures feature=\"customizability-showcase\" />\n\n### 5. User Interaction Features: {{\"class\": \"mt-0\"}}\n\n* Pause timer on onMouseEnter, tab switch, window blur or by user action. {{ \"class\": \"m-0\" }}\n* Swipe-to-dismiss functionality. {{ \"class\": \"m-0\" }}\n* Dismiss toasts on clicking the body or the close button. {{ \"class\": \"m-0\" }}\n\n<CoreFeatures feature=\"interaction-showcase\" />\n\n### 6. Timer Control: {{\"class\": \"mt-0\"}}\n\n* Full control over toast timers, including pausing and resetting. {{ \"class\": \"m-0\" }}\n* Support for infinite duration. {{ \"class\": \"m-0\" }}\n\n<CoreFeatures feature=\"timer-showcase\" />\n\n### 7. Visibility and Tab Management: {{\"class\": \"mt-0\"}}\n\n* Option to prevent rendering of toasts if the tab is blurred. {{ \"class\": \"m-0\" }}\n* Visibility change event listeners per toaster to manage timers accordingly. {{ \"class\": \"m-0\" }}\n\n### 8. Accessibility: {{\"class\": \"mt-0\"}}\n\n* Built-in ARIA roles for accessibility. {{ \"class\": \"m-0\" }}\n\n### 9. Callbacks and Events: {{\"class\": \"mt-0\"}}\n\n* Custom callbacks for toast exit with detailed reasons (true, false, or custom provided). {{ \"class\": \"m-0\" }}\n* Lifecycle hooks to handle specific events like dismissal or updates. {{ \"class\": \"m-0\" }}\n"
  },
  {
    "title": "Props",
    "description": "Solid Notifications props guide",
    "slug": "/props",
    "content": "import Code, { InlineCode } from \"~/components/Code\";\r\nimport Title from \"~/components/Title\";\n\n<Title>Props</Title>\n\n# Props\n\nCustomize the behavior of SolidNotifications with these configurable props. {{ \"class\": \"lead\"}}\n\n## Toaster config {{ \"data-nav\": \"link\", \"id\": \"toaster-config\" }}\n\nGlobal props. Can be applied to `ToastProvider` and `Toaster`.\n\n* **limit** - The maximum number of toasts to display at once. Excess toasts are queued and rendered when space becomes available. For no limit, set limit to `false` or `0`. {{ \"class\" : \"mb-2\",  \"data-nav\": \"sublink\", \"id\": \"limit\" }}\n\n     <InlineCode lang=\"tsx\">\n\n  ```tsx\n  limit: number | false;\n  ```\n\n     </InlineCode>\n\n  Default value: `8` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **reverseToastOrder** - If true, toasts are rendered in reverse order (newest at the top/bottom). {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"reverseToastOrder\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n    ```tsx\r\n    reverseToastOrder: boolean;\r\n    ```\n  ````\n\n    </InlineCode>\n\n  Default value: `false` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **offsetX** - Horizontal offset for the toaster's position. {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"offsetX\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        offsetX: number;\r\n        ```\r\n\r\n    </InlineCode>\n  ````\n\n  Default value: `16` {{ \"class\": \"mt-2 text-xs\"}}\n\n* **offsetY** - Vertical offset for the toaster's position. {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"offsetY\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        offsetY: number;\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n    Default value: `16` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **gutter** - Spacing between toasts. {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"gutter\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        gutter: number;\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n      Default value: `16` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **positionY** - Vertical positioning of the toaster. {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"positionY\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        positionY: \"top\" | \"bottom\";\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n    Default value: `\"top\"` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **positionX** - Horizontal positioning of the toaster. {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"positionX\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        positionX: \"left\" | \"center\" | \"right\";\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n      Default value: `\"right\"` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **renderOnWindowInactive** - If true, toasts will render even when the window is inactive (blurred). {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"renderOnWindowInactive\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        renderOnWindowInactive: boolean;\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n    Default value: `false` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **pauseOnWindowInactive** - If true, toast progress will pause when the window is inactive (blurred). {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"pauseOnWindowInactive\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        pauseOnWindowInactive: boolean;\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n       Default value: `true` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **toasterStyle** - Custom styles for the toaster container. {{ \"class\" : \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"toasterStyle\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n        ```tsx\r\n        toasterStyle: Omit<JSX.CSSProperties, \"top\" | \"bottom\" | \"left\" | \"right\">;\r\n        ```\r\n\r\n    </InlineCode>\r\n\r\n    Default value: `null` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n## Toast config {{ \"data-nav\": \"link\", \"id\": \"toast-config\" }}\n\nToast props. Can be applied to all components; `ToastProvider`, `Toaster` and `Toast`.\n\n* **theme** - The theme of the toast. Two theme types are included; `light` and `dark`, but any string can be provided. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"theme\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  theme: string | undefined | null;\n  ```\n\n    </InlineCode>\n\n  ```\n  Default value: `\"light\"` {{ \"class\": \"mt-3 text-xs\" }}\n  ```\n\n* **type** - The type of the toast. Can be \"default\", \"success\", \"error\", \"info\", \"warning\" and \"loading\". {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"type\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\n  ```\n\n    </InlineCode>\n\n  Default value: `\"default\"` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **duration** - Duration (in milliseconds) before the toast is dismissed. Set to `false` or `0` for persistent toasts. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"duration\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  duration: number | false;\n  ```\n\n    </InlineCode>\n\n  Default value: `5000` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **onEnter** - CSS animation name when the toast enters. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"onEnter\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  onEnter: string;\n  ```\n\n    </InlineCode>\n\n  Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **enterDuration** - Duration of the enter animation in milliseconds. Should be set to the same duration as the animation. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"enterDuration\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  enterDuration: number;\n  ```\n\n    </InlineCode>\n\n  Default value: `300` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **onExit** - CSS animation name when the toast exits. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"onExit\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  onExit: string;\n  ```\n\n    </InlineCode>\n\n  Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **exitDuration** - Duration of the exit animation in milliseconds. Should be set to the same duration as the animation. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"exitDuration\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  exitDuration: number;\n  ```\n\n    </InlineCode>\n\n  Default value: `300` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **onIdle** - CSS class which will be applied when the toast is idle. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"onIdle\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  onIdle: string;\n  ```\n\n    </InlineCode>\n\n  Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **class** - CSS class applied to the toast body. Can be a string or a function returning a string. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"class\" }}\n\n     <InlineCode lang=\"tsx\">\n\n  ```tsx\n  class: string |\r\n   ((args:{\r\n     theme: string | undefined | null;\r\n     type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n   }) => string);\n  ```\n\n     </InlineCode>\n\n  ```\n   Default value: `\"sn-toast\"` {{ \"class\": \"mt-3 text-xs\" }}\n  ```\n\n* **style** - Custom styles for the toast body. Can be an object containing css properties or a function returning the object. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"style\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  style: JSX.CSSProperties |\r\n    ((args: {\r\n      theme: string | undefined | null;\r\n      type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n    }) => JSX.CSSProperties);\n  ```\n\n    </InlineCode>\n\n  ```\n   Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n  ```\n\n* **pauseOnHover** - Whether the toast pauses when hovered. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"pauseOnHover\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  pauseOnHover: boolean;\n  ```\n\n    </InlineCode>\n\n  Default value: `true` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **wrapperClass** - CSS class for the toast wrapper. Can be a string or a function returning a string. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"wrapperClass\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  wrapperClass: string |\r\n    ((args: {\r\n      theme: string | undefined | null;\r\n      type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n    }) => string);\n  ```\n\n    </InlineCode>\n\n  Default value: `\"sn-toast-wrapper\"` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **wrapperStyle** - Custom styles for the toast wrapper. Can be an object containing css properties or a function returning the object. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"wrapperStyle\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ```tsx\n  wrapperStyle: JSX.CSSProperties |\r\n    ((args: {\r\n      theme: string | undefined | null;\r\n      type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n    }) => JSX.CSSProperties);\n  ```\n\n    </InlineCode>\n\n  Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **enterCallback** - Callback function executed when the toast enters. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"enterCallback\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  enterCallback: () => void;\r\n  ```\n  ````\n\n    </InlineCode>\n\n  Default value: `null` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **updateCallback** - Callback function executed when the toast updates. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"updateCallback\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  updateCallback: () => void;\r\n  ```\n  ````\n\n    </InlineCode>\n\n  Default value: `null` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **exitCallback** - Callback function executed when the toast exits. It will provide a `reason` argument with which the `dismiss()` function was called, or if it wasn't provided, the reason will be `false` if the toast dismissed by timer expiration, or `true` if it was dismissed by the user. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"exitCallback\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  exitCallback: (reason?: boolean | string) => void;\r\n  ```\n  ````\n\n    </InlineCode>\n\n  Default value: `null` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **showDismissButton** - Whether to show a dismiss button. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"showDismissButton\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  showDismissButton: boolean;\r\n  ```\n  ````\n\n    </InlineCode>\n\n  Default value: `true` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **dismissButtonClass** - CSS class for the dismiss button. Can be a string or a function returning a string. The function will be provided with `theme` and `type` as arguments.{{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"dismissButtonClass\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  dismissButtonClass: string |\r\n    ((args: {\r\n      theme: string | undefined | null;\r\n      type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n    }) => string);\r\n  ```\r\n\r\n  </InlineCode>\r\n\r\n  Default value: `\"sn-dismiss-button\"` {{ \"class\": \"mt-3 text-xs\" }}\n  ````\n\n* **dismissButtonStyle** - Custom styles for the dismiss button. Can be an object containing css properties or a function returning the object. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"dismissButtonStyle\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n   ```tsx\r\n    dismissButtonStyle: JSX.CSSProperties | undefined |\r\n      ((args: {\r\n        theme: string | undefined | null;\r\n        type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n      }) => JSX.CSSProperties);\r\n    ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **dismissOnClick** - Whether clicking the toast dismisses it. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"dismissOnClick\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  dismissOnClick: boolean;\r\n  ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `false` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **showProgressBar** - Whether to show a progress bar on the toast. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"showProgressBar\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  showProgressBar: boolean;\r\n  ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `true` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **progressBarClass** - CSS class for the progress bar. Can be a string or a function returning a string. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"progressBarClass\" }}\n\n  ````\n      <InlineCode lang=\"tsx\">\r\n\r\n   ```tsx\r\n    progressBarClass: string |\r\n      ((args: {\r\n        theme: string | undefined | null;\r\n        type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n      }) => string);\r\n    ```\r\n\r\n      </InlineCode>\n  ````\n\n  Default value: `\"sn-progress-bar\"` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **progressBarStyle** - Custom styles for the progress bar. Can be an object containing css properties or a function returning the object. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"progressBarStyle\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n   ```tsx\r\n    progressBarStyle: JSX.CSSProperties | undefined |\r\n      ((args: {\r\n        theme: string | undefined | null;\r\n        type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n      }) => JSX.CSSProperties);\r\n    ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `undefined` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **showIcon** - Whether to show an icon in the toast. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"showIcon\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  showIcon: boolean;\r\n  ```\r\n\r\n    </InlineCode>\n  ````\n\n  Default value: `true` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **icon** - Custom icon for the toast. Can be a JSX element or a function returning a JSX element. The function will be provided with `theme` and `type` as arguments. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"icon\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  icon: JSX.Element | null |\r\n    ((args: args: {\r\n      theme: string | undefined | null;\r\n      type: \"default\" | \"success\" | \"error\" | \"loading\" | \"warning\" | \"info\";\r\n      }) => JSX.Element) ;\r\n  ```\r\n\r\n    </InlineCode>\n  ````\n\n  Default value: `null` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **dragToDismiss** - Whether dragging the toast dismisses it. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"dragToDismiss\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  dragToDismiss: boolean;\r\n  ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `true` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **dragTreshold** - Distance (in pixels) required to dismiss the toast via dragging. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"dragTreshold\" }}\n\n  ````\n    <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  dragTreshold: number;\r\n  ```\r\n\r\n    </InlineCode>\n  ````\n\n  Default value: `100` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **ariaLive** - ARIA live attribute for accessibility. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"ariaLive\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  ariaLive: \"polite\" | \"assertive\" | \"off\";\r\n  ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `\"polite\"` {{ \"class\": \"mt-3 text-xs\" }}\n\n* **role** - ARIA role attribute. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"role\" }}\n\n  ````\n  <InlineCode lang=\"tsx\">\r\n\r\n  ```tsx\r\n  role: \"status\" | \"alert\" | \"log\";\r\n  ```\r\n\r\n  </InlineCode>\n  ````\n\n  Default value: `\"status\"` {{ \"class\": \"mt-3 text-xs\" }}\n\n## Other config: {{ \"data-nav\": \"link\", \"id\": \"other-config\" }}\n\nProps that are used depending on where they are applied.\n\n* **id** - Unique identifier for the toast. If not provided, an ID is generated automatically. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"id\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  id: string;\r\n  ```\n  ````\n\n    </InlineCode>\n\n* **content** - The main content of the toast. Can be a string, JSX element, or a function returning JSX. If function, receives `Toast` as argument. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"content\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  content: | string\r\n           | JSX.Element\r\n           | ((toast: Toast) => JSX.Element | string);;\r\n  ```\n  ````\n\n    </InlineCode>\n\n* **toasterId** - Specifies the toaster instance where the toast should be displayed. Required when using multiple toasters. {{ \"class\": \"mb-2\", \"data-nav\": \"sublink\", \"id\": \"toasterId\" }}\n\n    <InlineCode lang=\"tsx\">\n\n  ````\n  ```tsx\r\n  toasterId: string;\r\n  ```\n  ````\n\n    </InlineCode>\n"
  },
  {
    "title": "Quickstart",
    "description": "Solid Notifications quick start guide",
    "slug": "/quickstart",
    "content": "import Code from \"~/components/Code\";\r\nimport Title from \"~/components/Title\";\n\n<Title>Quickstart</Title>\n\n# Quickstart\n\nGet up and running with SolidNotifications in just a few simple steps. {{ \"class\": \"lead\" }}\n\n## Installation {{\"data-nav\": \"link\"}}\n\nInstall the package from npm: {{ \"class\": \"lead\" }}\n\n<Code lang=\"bash\">\n\n```bash\nnpm install solid-notifications\r\n# or\r\nyarn add solid-notifications\r\n# or\r\npnpm add solid-notifications\n```\n\n</Code>\n\n## Usage {{\"data-nav\": \"link\"}}\n\nHere's a quick example to show how easy it is to use: {{ \"class\": \"lead\" }}\n\n### 1. Mount the ToastProvider and Toaster components:\n\nWrap your app with the `ToastProvider` component. Put the `Toaster` component anywhere in the component tree to display toasts.\n\n<Code lang=\"tsx\">\n\n```tsx\nimport { ToastProvider, Toaster } from \"solid-notifications\";\r\n\r\nexport default function App(props) {\r\n  return (\r\n    <ToastProvider>\r\n      <Toaster />\r\n      {props.children}\r\n    </ToastProvider>\r\n  );\r\n}\n```\n\n</Code>\n\n### 2. Import the Solid Notifications css file into your main css file:\n\nIt can also be imported directly into the main component file.\n\n<Code lang=\"css\">\n\n```css\n/* index.css */\r\n\r\n@import \"solid-notifications/index.css\";\n```\n\n</Code>\n\n### 3. Create toasts:\n\nUse the `useToast` hook to access the `notify` function and other toast functionality.\n\n<Code lang=\"tsx\">\n\n```tsx\nimport { useToast } from \"solid-notifications\";\r\n\r\nexport default function AppContent() {\r\n  const { notify } = useToast();\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => notify(\"🚀 New toast ready to serve!\")}>\r\n        Create a Toast!\r\n      </button>\r\n    </div>\r\n  );\r\n}\n```\n\n</Code>\n"
  },
  {
    "title": "404",
    "description": "Page not found",
    "slug": "/",
    "content": "import { HttpStatusCode } from \"@solidjs/start\";\r\nimport Title from \"~/components/Title\";\n\n<HttpStatusCode code={404} />\n\n<Title>Not found</Title>\n\n# Page Not Found\n\nWe could not find what you were looking for.\r\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken.\n"
  }
]